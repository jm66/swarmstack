---
- hosts: all
  gather_facts: true
  order: sorted
  remote_user: root

  roles:
  - ../roles/common

  tasks:

### INSTALL NETDATA ON ALL HOSTS
  - name: Install requisite packages on SWARMJOIN host
    yum: name=ansible,git,httpd-tools state=latest
    when: "inventory_hostname == SWARMJOIN"

  - name: Check if NetData already installed
    shell: which netdata ; if [ $? -eq 1 ]; then echo 'notinstalled'; else echo 'installed'; fi
    changed_when: false
    register: netdatainstalled

  - name: Install NetData
    shell: bash <(curl -Ss https://my-netdata.io/kickstart.sh) all --dont-wait
    args:
      warn: no
      executable: /bin/bash
    ignore_errors: true
    changed_when: False
    when: "netdatainstalled.stdout.find('notinstalled') != -1"

  - name: Ensure NetData is enabled and started
    systemd: name=netdata state=started enabled=yes masked=no

  - name: Always upgrade NetData
    shell: /usr/src/netdata.git/netdata-updater.sh
    args:
      warn: no
      executable: /bin/bash
    ignore_errors: true
    changed_when: False


### DOWNLOAD SWARMSTACK
  - name: Download latest swarmstack for comparison
    git:
      repo: "{{SWARMSTACKREPO}}"
      dest: /usr/local/src/swarmstack
    ignore_errors: true
    when: "inventory_hostname == SWARMJOIN"

  - name: Check if local copy of swarmstack exists
    stat: path=/usr/local/src/localswarmstack
    changed_when: false
    register: localswarmstack
    when: "inventory_hostname == SWARMJOIN"

  - name: Create a local copy of swarmstack for editing
    shell: rsync -aq --exclude=.git /usr/local/src/swarmstack/ /usr/local/src/localswarmstack/
    when: "inventory_hostname == SWARMJOIN and not localswarmstack.stat.exists"

  - name: Generate admin password hash for portainer
    shell: "htpasswd -nbB admin '{{ADMIN_PASSWORD}}' | cut -d ':' -f 2 | sed 's/\\$/\\$\\$/g'"
    register: portaineradminpw
    when: "inventory_hostname == SWARMJOIN"

  - name: Update docker-compose.yml with portainer admin password hash
    lineinfile:
      path: /usr/local/src/localswarmstack/docker-compose.yml
      regexp: "command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify"
      line: "    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify --admin-password {{ item }}"
    with_items: "{{portaineradminpw.stdout}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Update docker-compose.yml with web.external-url for alertmanager
    lineinfile:
      insertbefore: 'cluster.peer=alertmanagerB:9094'
      path: /usr/local/src/localswarmstack/docker-compose.yml
      line: "      - '--web.external-url=https://{{ EXTERNAL_ENDPOINT }}:9093/'"
    when: "inventory_hostname == SWARMJOIN"

  - name: Update docker-compose.yml with web.external-url for alertmanagerB
    lineinfile:
      insertbefore: 'cluster.peer=alertmanager:9094'
      path: /usr/local/src/localswarmstack/docker-compose.yml
      line: "      - '--web.external-url=https://{{ EXTERNAL_ENDPOINT }}:9095/'"
    when: "inventory_hostname == SWARMJOIN"

  - name: Update docker-compose.yml with web.external-url for Prometheus
    lineinfile:
      insertafter: 'storage.tsdb.retention'
      path: /usr/local/src/localswarmstack/docker-compose.yml
      line: "      - '--web.external-url=https://{{ EXTERNAL_ENDPOINT }}:9090/'"
    when: "inventory_hostname == SWARMJOIN"


### PROXY SETTINGS
  - name: Update docker-compose.yml with proxy settings for Caddy
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Caddy PROXY"
      marker_end: "SWARMSTACK_END Caddy PROXY"
      path: /usr/local/src/localswarmstack/docker-compose.yml
      insertafter: '      - CADDYPATH='
      block: |2
              - http_proxy={{item.http_proxy}}
              - https_proxy={{item.https_proxy}}
              - no_proxy={{item.no_proxy}},{% for host in groups['swarm'] %}{{ hostvars[host].inventory_hostname }}{{ '' if loop.last else ','}}{% endfor %}
    with_items:
      - { http_proxy: "{{PROXY_HTTP}}", https_proxy: "{{PROXY_HTTPS}}", no_proxy: "{{PROXY_NOPROXY}}" }
    when: "inventory_hostname == SWARMJOIN and PROXY_ENABLED=='true'"

  - name: Update docker-compose.yml with proxy settings for Grafana
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Grafana PROXY"
      marker_end: "SWARMSTACK_END Grafana PROXY"
      path: /usr/local/src/localswarmstack/docker-compose.yml
      insertbefore: '      - GF_SECURITY_ADMIN_USER='
      block: |2
              - http_proxy={{item.http_proxy}}
              - https_proxy={{item.https_proxy}}
              - no_proxy={{item.no_proxy}},{% for host in groups['swarm'] %}{{ hostvars[host].inventory_hostname }}{{ '' if loop.last else ','}}{% endfor %}
    with_items:
      - { http_proxy: "{{PROXY_HTTP}}", https_proxy: "{{PROXY_HTTPS}}", no_proxy: "{{PROXY_NOPROXY}}" }
    when: "inventory_hostname == SWARMJOIN and PROXY_ENABLED=='true'"


### LDAP SETTINGS
  - name: Add LDAP settings to new caddy/Caddyfile.ldap
    replace:
      path: /usr/local/src/localswarmstack/caddy/Caddyfile.ldap
      regexp: '^    ldap url=.*$'
      replace: "    ldap url={{ (LDAP_USE_SSL == 'true') | ternary('ldaps','ldap') }}://{{LDAP_HOST}}:{{LDAP_PORT}},insecure={{LDAP_INSECURE}},timeout=5s,username={{LDAP_BIND_DN}},password={{LDAP_BIND_PASSWORD}},base=\"{{LDAP_SEARCH_BASE_DNS}}\",filter=\"{{LDAP_SEARCH_FILTER}}\""
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"

  - name: Add LDAP settings to grafana/ldap.toml
    lineinfile:
      path: /usr/local/src/localswarmstack/grafana/ldap.toml
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: '^host =', line: "host = \"{{LDAP_HOST}}\"" }
      - { regexp: '^port =', line: "port = {{LDAP_PORT}}" }
      - { regexp: '^use_ssl =', line: "use_ssl = {{LDAP_USE_SSL}}" }
      - { regexp: '^start_tls =', line: "start_tls = {{LDAP_START_TLS}}" }
      - { regexp: '^bind_dn =', line: "bind_dn = \"{{LDAP_BIND_DN}}\"" }
      - { regexp: '^bind_password =', line: "bind_password = \"\"\"{{LDAP_BIND_PASSWORD}}\"\"\"" }
      - { regexp: '^search_filter =', line: "search_filter= \"{{LDAP_SEARCH_FILTER}}\"" }
      - { regexp: '^search_base_dns =', line: "search_base_dns= [\"{{LDAP_SEARCH_BASE_DNS}}\"]" }
      - { regexp: '^username =', line: "username = \"{{LDAP_ATTRIBUTE_USERNAME}}\"" }
      - { regexp: '^group_dn =', line: "group_dn = \"{{LDAP_GROUP_DN}}\"" }
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"

  - name: Update docker-compose.yml with caddy settings
    lineinfile:
      path: /usr/local/src/localswarmstack/docker-compose.yml
      regexp: "^    file: ./caddy/Caddyfile$"
      line: "    file: ./caddy/Caddyfile.ldap"
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"

  - name: Update docker-compose.yml with grafana LDAP settings 1 of 4
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Grafana LDAP 1 of 4"
      marker_end: "SWARMSTACK_END Grafana LDAP 1 of 4"
      path: /usr/local/src/localswarmstack/docker-compose.yml
      insertbefore: '  grafana_provisioning_datasources:'
      block: |2
          grafana_configuration:
            file: ./grafana/grafana.ini
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"

  - name: Update docker-compose.yml with grafana LDAP settings 2 of 4
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Grafana LDAP 2 of 4"
      marker_end: "SWARMSTACK_END Grafana LDAP 2 of 4"
      path: /usr/local/src/localswarmstack/docker-compose.yml
      insertbefore: '  grafana_provisioning_datasources:'
      block: |2
          grafana_ldap:
            file: ./grafana/ldap.toml
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"

  - name: Update docker-compose.yml with grafana LDAP settings 3 of 4
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Grafana LDAP 3 of 4"
      marker_end: "SWARMSTACK_END Grafana LDAP 3 of 4"
      path: /usr/local/src/localswarmstack/docker-compose.yml
      insertbefore: '      - source: grafana_dashboard_etcd-dash'
      block: |2
              - source: grafana_configuration
                target: /etc/grafana/grafana.ini
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"

  - name: Update docker-compose.yml with grafana LDAP settings 4 of 4
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Grafana LDAP 4 of 4"
      marker_end: "SWARMSTACK_END Grafana LDAP 4 of 4"
      path: /usr/local/src/localswarmstack/docker-compose.yml
      insertbefore: '      - source: grafana_dashboard_etcd-dash'
      block: |2
              - source: grafana_ldap
                target: /etc/grafana/ldap.toml
    when: "inventory_hostname == SWARMJOIN and LDAP_ENABLED == 'true'"


### ADD PROMETHEUS SCRAPE CONFIGS FOR HOSTS
  - name: Add NetData to local Prometheus scrapes
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN NetData {{item}}"
      marker_end: "SWARMSTACK_END NetData {{item}}"
      path: /usr/local/src/localswarmstack/prometheus/conf/prometheus.yml
      block: |2
          - job_name: 'netdata-{{item}}'
            metrics_path: '/api/v1/allmetrics'
            params:
              format: [prometheus_all_hosts]
            honor_labels: true
            static_configs:
              - targets: ['{{item}}:19999']
    with_items: "{{groups['all']}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Add docker to local Prometheus scrapes
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN docker {{item}}"
      marker_end: "SWARMSTACK_END docker {{item}}"
      path: /usr/local/src/localswarmstack/prometheus/conf/prometheus.yml
      block: |2
          - job_name: 'dockerd-{{item}}'
            metrics_path: '/metrics'
            honor_labels: true
            static_configs:
              - targets: ['{{item}}:9323']
    with_items: "{{groups['swarm']}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Add etcd to local Prometheus scrapes
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN etcd {{item}}"
      marker_end: "SWARMSTACK_END etcd {{item}}"
      path: /usr/local/src/localswarmstack/prometheus/conf/prometheus.yml
      block: |2
          - job_name: 'etcd-{{item}}'
            metrics_path: '/metrics'
            honor_labels: true
            static_configs:
              - targets: ['{{item}}:2379']
    with_items: "{{groups['etcd']}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Add Portworx to local Prometheus scrapes
    blockinfile:
      marker_begin: "SWARMSTACK_BEGIN Portworx {{item}}"
      marker_end: "SWARMSTACK_END Portworx {{item}}"
      path: /usr/local/src/localswarmstack/prometheus/conf/prometheus.yml
      block: |2
          - job_name: 'portworx-{{item}}'
            metrics_path: '/metrics'
            honor_labels: true
            static_configs:
              - targets: ['{{item}}:9001']
    with_items: "{{groups['portworx']}}"
    when: "inventory_hostname == SWARMJOIN"


### MODIFY CADDY CONFIGS
  - name: Add all hosts to javascript 
    lineinfile:
      insertbefore: 'SWARMSTACK JS MARKER'
      path: /usr/local/src/localswarmstack/caddy/index.html
      line: "document.getElementById('{{hostvars[item]['inventory_hostname']}}').href = window.location.protocol + '//' + window.location.hostname + ':19998/{{hostvars[item]['inventory_hostname']}}/';"
    with_items: "{{groups['all']}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Add all hosts to HTML
    blockinfile:
      insertbefore: 'SWARMSTACK HTML MARKER'
      marker: "<!-- {{item}} ANSIBLE MANAGED BLOCK -->"
      path: /usr/local/src/localswarmstack/caddy/index.html
      block: |
        <div class="boxes">
          <div class="linkbox"><a target="_blank" href="" id="{{hostvars[item]['inventory_hostname']}}"><h3>NetData - {{hostvars[item]['inventory_hostname']}}</h3></a></div>
          <div class="box">Everything happening on your systems and applications</div>
        </div>
    with_items: "{{groups['all']}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Add NetData proxy for all hosts to Caddyfile
    blockinfile:
      insertbefore: 'SWARMSTACK MARKER'
      marker: "# {{item}} ANSIBLE MANAGED BLOCK"
      path: /usr/local/src/localswarmstack/caddy/Caddyfile
      block: |2
          proxy /{{hostvars[item]['inventory_hostname']}} http://{{item}}:19999/ {
            without /{{hostvars[item]['inventory_hostname']}}
            transparent
          }
    with_items: "{{groups['all']}}"
    when: "inventory_hostname == SWARMJOIN"

  - name: Add NetData proxy for all hosts to Caddyfile.ldap example
    blockinfile:
      insertbefore: 'SWARMSTACK MARKER'
      marker: "# {{item}} ANSIBLE MANAGED BLOCK"
      path: /usr/local/src/localswarmstack/caddy/Caddyfile.ldap
      block: |2
          proxy /{{hostvars[item]['inventory_hostname']}} http://{{item}}:19999/ {
            without /{{hostvars[item]['inventory_hostname']}}
            transparent
          }
    with_items: "{{groups['all']}}"
    when: "inventory_hostname == SWARMJOIN"


### BRING UP SWARMSTACK IF NOT ALREADY RUNNING
  - name: Check if swarmstack is running
    shell: docker service ls | grep swarmstack_caddy; if [ $? -eq 1 ]; then echo 'notrunning'; else echo 'running'; fi
    ignore_errors: true
    changed_when: false
    register: swarmstackrunning
    when: "inventory_hostname == SWARMJOIN"
   
  - name: Bring up swarmstack
    shell: "ADMIN_PASSWORD={{ADMIN_PASSWORD}} PUSH_USER={{PUSH_USER}} PUSH_PASSWORD={{PUSH_PASSWORD}} docker stack deploy -c /usr/local/src/localswarmstack/docker-compose.yml swarmstack"
    ignore_errors: true
    when: "inventory_hostname == SWARMJOIN and swarmstackrunning.stdout.find('notrunning') != -1"

...
